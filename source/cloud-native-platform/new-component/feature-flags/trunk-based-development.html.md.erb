---
title: Trunk-based development
last_reviewed_on: 2025-07-02
review_in: 3 months
weight: 99
hide_in_navigation: true
---

# <%= current_page.data.title %>

**Trunk-based development** is a development style where developers, as far as possible, work *directly* in the main or "trunk" branch of the code (usually named `master`, `main` or `trunk`).  If separate branches are needed for any reason, they do not usually exist for more than a day or so before being merged back into the trunk branch.  This is in contrast to **feature-based development**, where developers routinely create separate branches for each feature or task, which can exist for weeks or even months before being merged back into the trunk branch.

Feature-based development encourages long-lived feature branches, which generally lead to more complex merge conflicts that take longer to resolve.  It can also lead to situations where the trunk branch is not stable or deployable for a period of time, as newly merged branches may have introduced errors (identified during automated or manual testing) that are not trivial to fix.

In contrast, trunk-based development ensures that merge conflicts are kept to a minimum by encouraging developers to merge their changes back into the trunk branch frequently, ideally several times a day.  It also means the code is tested continuously, and hence any errors found are likely to be fixed fairly easily, helping to maintain a stable and deployable codebase at all times.

The renowned software methodology book [Accelerate: The Science of Lean Software and DevOps](https://itrevolution.com/product/accelerate/) highlights trunk-based development as a key practice for high-performing software teams.  However, it is not always easy for larger teams to practise trunk-based development.  It requires a high level of discipline and coordination among developers, a robust set of automated tests and a finely tuned CI/CD pipeline with immediate notification of failures to ensure that the codebase remains stable and deployable at all times.

Trunk-based development is the preferred method of software development at HMCTS and should work well for teams with some or all of the following characteristics:

- small, intimate, experienced and highly able teams who communicate frequently and well; code reviews, common coding styles and conventions etc. and a good understanding of each other are essential
- products with continuous releases rather than feature-drops every quarter etc. (although challenges owing to infrequent releases can be mitigated through the use of [feature flags](/cloud-native-platform/new-component/feature-flags/background-information.html#dark-deployments))
- projects with comprehensive automated tests (since that is the only protection against deploying bad code straight into live)
- teams with the autonomy to deploy and release frequently (ideally several times per day) with full control over the release schedule, who do not need to seek external approval (although challenges owing to infrequent releases can be mitigated through the use of [feature flags](/cloud-native-platform/new-component/feature-flags/background-information.html#dark-deployments))
- teams who have direct contact with their users and can get fast, constructive feedback from them
- teams who practise pair programming or mobbing

For further reading, see the [trunk-based development website](https://trunkbaseddevelopment.com/).