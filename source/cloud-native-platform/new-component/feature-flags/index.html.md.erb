---
title: Feature flags
last_reviewed_on: 2025-06-25
review_in: 6 months
weight: 97
---

# <%= current_page.data.title %>

Feature flags are a powerful tool that can enhance a team's productivity; but they should be used sparingly, as described below.  For further information and background regarding these guidelines, [click here](background-information.html).


## When to use feature flags

The primary benefit of feature flags is to encourage [trunk-based development](https://trunkbaseddevelopment.com/) (TBD), where changes are made either directly in the `master` branch or in a short-lived feature branch (i.e. one that lasts a few days at most before being merged to `master`).  For teams that work mostly in a feature branch for weeks at a time, feature flags can help ease the transition to TBD, although care should be taken to ensure that all code paths are tested and the feature flags are promptly removed when no longer needed.  An example of an HMCTS team using feature flags to assist trunk-based development is the **XUI** team.

Other recommended uses of feature flags are:

1. Gradual roll-outs (e.g. one court at a time)
2. Beta testing and A/B testing
3. Operational toggles (kill switches, adjustment of logging levels and other performance or debugging aids)


## When not to use feature flags

It is always preferable to break features down into their smallest releasable components, such that code can be deployed rapidly _without_ needing to hide parts of the application behind a feature flag.  This allows users to see and use features at the earliest opportunity, enabling rapid iterations based on their feedback.  Therefore dark deployments are not recommended unless the release schedule is fixed and infrequent (e.g. weeks or months between releases), which should not be the case for most teams.

It is also not recommended to use feature flags to implement user permissions or preferences, or to take short-cuts during testing in lower environments, as there are better ways to achieve the same results (see the [guidance](background-information.html) for details).


## Feature-flag management

In terms of management tools, [LaunchDarkly](https://launchdarkly.com/) is the feature-flag platform used by most HMCTS product teams that employ feature flags.  Another possibility is [Azure App Configuration](https://learn.microsoft.com/en-us/azure/azure-app-configuration/overview), which is rarely used in HMCTS but is obviously aligned with the strategic decision to use Azure as the platform for HMCTS cloud-based applications.  Finally, teams deploying to a Kubernetes environment may use environment variables in conjunction with [FluxCD](https://fluxcd.io/) (open-source) to provide feature-flag facilities in their code, which is clearly simpler and cheaper than using a commercial product.

These three choices are summarised below.  Whichever one a team uses, care must be taken to **prevent the feature-flag platform from becoming a single point of failure** for the application, as the availability of these external services can never be guaranteed.

| Platform | Guidelines |
|----------|-------------|
| **[Azure App Configuration](background-information.html#azure-app-configuration)** | For **new applications based on Azure services**, in particular MS Entra ID (Azure AD), that are managed by **teams with prior experience of Azure administration** and are satisfied with the feature-flag capabilities it offers. |
| **[FluxCD and environment variables](background-information.html#fluxcd-and-environment-variables)** | For **Kubernetes applications** where the product teams make relatively simple changes that do *not* require approvals to be logged within a feature-flag platform. |
| **[LaunchDarkly](background-information.html#launchdarkly)** | For **all other cases**. |


### Accessing Azure App Configuration

The process for gaining access to Azure App Configuration is under review; contact [Casey Attwell](mailto:Casey.Attwell@justice.gov.uk) for more information.  In the meantime, you can send a request to [#platops-help](https://hmcts-reform.slack.com/app_redirect?channel=platops-help) to get access for your application.


### Accessing FluxCD

Guidance on how to set up and configure Flux can be found [here](/cloud-native-platform/new-component/gitops-flux.html#application-config-in-flux) and [here](https://github.com/hmcts/cnp-flux-config/blob/master/docs/repo-setup.md).


### Accessing LaunchDarkly

Developers automatically get access by being part of the `DTS CFT Developers` or `DTS SDS Developers` group in the [prod_users.yml](https://github.com/hmcts/azure-access/blob/master/users/prod_users.yml) file in the `azure-access` repository.  Non-developers can get access through the `DTS LaunchDarkly` group.

After you've logged in once you will be able to log in from [app.launchdarkly.com](https://app.launchdarkly.com/).

### Documentation

Documentation can be accessed directly from the [LaunchDarkly](https://docs.launchdarkly.com/home) website.  Their [blog](https://launchdarkly.com/blog/) also contains useful information.

### Creating a new project

See [hmcts/launchdarkly-terraform](https://github.com/hmcts/launchdarkly-terraform) for instructions on how to set your new project up in Terraform.

### Environments

We currently provide `Test` and `Production` environments by default within LaunchDarkly.  If your team requires additional environments, you can do this by updating the appropriate lines in your team's [terraform.tfvars](https://github.com/hmcts/launchdarkly-terraform/blob/896019ed1efdebdf9237b7811ab2b9585a7708f2/terraform.tfvars#L59-L61) file.

For comprehensive documentation of environments in LaunchDarkly, see [here](https://launchdarkly.com/docs/home/account/environment).