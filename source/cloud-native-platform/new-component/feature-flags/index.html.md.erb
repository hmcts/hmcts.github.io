---
title: Feature flags
last_reviewed_on: 2025-06-25
review_in: 6 months
weight: 97
---

# <%= current_page.data.title %>

Feature flags are a powerful tool that can enhance a team's productivity; but they should be used sparingly, as described below.  For further information and background regarding these guidelines, [click here](background-information.html).


## When to use feature flags

The primary benefit of feature flags is to encourage [trunk-based development](https://trunkbaseddevelopment.com/) (TBD), where changes are made either directly in the `master` branch or in a short-lived feature branch (i.e. one that lasts a few days at most before being merged to `master`).  For teams that work mostly in a feature branch for weeks at a time, feature flags can help ease the transition to TBD, although care should be taken to ensure that all code paths are tested and the feature flags are promptly removed when no longer needed.  An example of an HMCTS team using feature flags to assist trunk-based development is the **XUI** team.

Other recommended uses of feature flags are:

1. Gradual roll-outs (e.g. one court at a time)
2. Beta testing and A/B testing
3. Operational toggles (kill switches, adjustment of logging levels and other performance or debugging aids)


## When not to use feature flags

It is always preferable to break features down into their smallest releasable components, such that code can be deployed rapidly _without_ needing to hide parts of the application behind a feature flag.  This allows users to see and use features at the earliest opportunity, enabling rapid iterations based on their feedback.  Therefore dark deployments (which suppress releases) should only be used when it is not possible or practical to release small incremental changes frequently or there is no obvious gain in doing so.  (See the [guidance](background-information.html#dark-deployments) for examples of such situations.)

It is also not recommended to use feature flags to implement user permissions or preferences, or to take short-cuts during testing in lower environments, as there are better ways to achieve the same results (see the [guidance](background-information.html) for details).


## DORA metrics

The table below shows some statistics for the [DORA throughput metrics](https://dora.dev/guides/dora-metrics-four-keys/#throughput) of deployment frequency (to Production) and change lead time for HMCTS code repositories measured in 2025.  Repos using LaunchDarkly are compared with those that don't.  The statistics only include repos that use Jenkins for CI/CD and that had at least one deployment from a protected branch in the previous 14 days from the date given.  For full details of how these statistics were measured and the caveats and assumptions made, see the [documentation](https://github.com/hmcts/hmcts-github-mining-tool/blob/master/RATIONALE.MD) for the mining tool in GitHub.

| Date | LaunchDarkly (Y/N) | Active repos | Ave. deployment frequency | Ave. change lead time | Min. change lead time | Max. change lead time | 
|-|-|-|-|-|-|-|
| 2nd April 2025 | Y | 55 | 0.51 deployments per day | 10.53 days | 0.012 days | 393.79 days |
| 2nd April 2025 | N | 147 | 0.38 deployments per day | 6.92 days | 0.0026 days | 367.05 days |
| 27th June 2025 | Y | 57 | 0.40 deployments per day | 11.12 days | 0.012 days | 312.30 days |
| 27th June 2025 | N | 143 | 0.38 deployments per day | 10.27 days | 0.0017 days | 1134.84 days |


## Feature-flag management tools

[LaunchDarkly](https://launchdarkly.com/) is the commercial feature-flag platform currently used by most HMCTS product teams that employ feature flags.  It is comprehensive, powerful and easy to use, with a wealth of supporting materials in the form of SDKs, documentation and blog posts.

[Azure App Configuration](https://learn.microsoft.com/en-us/azure/azure-app-configuration/overview) can also be used to manage feature flags.  It is rarely used in HMCTS but is aligned with the strategic decision to use Azure as the platform for HMCTS cloud-based applications and offers all of the essential feature-flag functions provided by LaunchDarkly.

Teams can also manage feature flags manually by using environment variables, configuration files and so on; these files may be stored in the same repository as the rest of the code.  Changes to feature-flag values in these files will result in a new deployment and hence the application will be updated to reflect the new values.  This is clearly simpler and cheaper than using a commercial product although more limited in scope and convenience (e.g., no centralised administration dashboard).  Changes also take effect more slowly, although tools such as [FluxCD](https://fluxcd.io/) for Kubernetes applications can minimise the deployment overhead.

These three choices are summarised below.

| Approach | Suitability |
|----------|-------------|
| **[LaunchDarkly](background-information.html#recommendations-for-managing-feature-flags-launchdarkly)** | For all cases. |
| **[Azure App Configuration](background-information.html#recommendations-for-managing-feature-flags-azure-app-configuration)** | For new applications based on Azure services, in particular MS Entra ID (Azure AD), that are managed by teams with prior experience of Azure administration and are satisfied with the feature-flag capabilities it offers. |
| **[Manual](background-information.html#manual-approach)** | For relatively simple feature-flag use where teams do not need the more advanced facilities offered by a feature-flag platform. |

If a feature-flag platform is used, care must be taken to **prevent it from becoming a single point of failure** for the application, as the availability of these external services can never be guaranteed.

### Accessing Azure App Configuration

The process for gaining access to Azure App Configuration is under review; contact [Casey Attwell](mailto:Casey.Attwell@justice.gov.uk) for more information.  In the meantime, you can send a request to [#platops-help](https://hmcts-reform.slack.com/app_redirect?channel=platops-help) to get access for your application.


### Accessing LaunchDarkly

Developers automatically get access by being part of the `DTS CFT Developers` or `DTS SDS Developers` group in the [prod_users.yml](https://github.com/hmcts/azure-access/blob/master/users/prod_users.yml) file in the `azure-access` repository.  Non-developers can get access through the `DTS LaunchDarkly` group.

After you've logged in once you will be able to log in from [app.launchdarkly.com](https://app.launchdarkly.com/).

### Documentation

Documentation can be accessed directly from the [LaunchDarkly](https://docs.launchdarkly.com/home) website.  Their [blog](https://launchdarkly.com/blog/) also contains useful information.

### Creating a new project

See [hmcts/launchdarkly-terraform](https://github.com/hmcts/launchdarkly-terraform) for instructions on how to set your new project up in Terraform.

### Environments

We currently provide `Test` and `Production` environments by default within LaunchDarkly.  If your team requires additional environments, you can do this by updating the appropriate lines in your team's [terraform.tfvars](https://github.com/hmcts/launchdarkly-terraform/blob/896019ed1efdebdf9237b7811ab2b9585a7708f2/terraform.tfvars#L59-L61) file.

For comprehensive documentation of environments in LaunchDarkly, see [here](https://launchdarkly.com/docs/home/account/environment).