---
title: Feature flags
last_reviewed_on: 2025-06-25
review_in: 6 months
weight: 97
---

# <%= current_page.data.title %>

Feature flags are a powerful tool that can enhance a team's productivity; but they should be used sparingly, as described below.  For further information and background regarding these guidelines, [click here](background-information.html).


## When to use feature flags

For an explanation of each of these use cases, see the [background information](background-information.html#common-uses-of-feature-flags).

| Use case | Guidelines | Golden rules |
|----------|------------|--------------|
| **[Dark deployments](background-information.html#dark-deployments)** |  - Prefer breaking features down into their smallest releasable components.<br />- Recommended for teams that _already_ practise [trunk-based development](trunk-based-development.html). | - Do not use feature flags to hide features that do not work; test fully in lower environments first.<br />- Flags must be removed as soon as the feature is fully released to all users.<br />- Changes to feature-flag values must be approved by the business owners beforehand. |
| **[Gradual roll-outs](background-information.html#gradual-roll-outs)** | - Prefer breaking features down into their smallest releasable components.<br />- Recommended for protection against incomplete or uncertain *business processes* rather than features that may contain bugs. | - Do not use raw IDs in the feature-flag platform for the purpose of identifying users; use a descriptive name for the user segment and add controlling logic in the code.<br />- Flags must be removed as soon as the feature is fully released to all users.<br />- Changes to feature-flag values must be approved by the business owners beforehand. |
| **[Feature experimentation / Beta testing](background-information.html#feature-experimentation-beta-testing)** | - Acceptable in the absence of better alternatives.<br />- Try to avoid selection bias by ensuring a representative cross-section of users are chosen. | - Ensure features are fully working (albeit incomplete) before exposing them to users.<br />- Do not use raw IDs in the feature-flag platform for the purpose of identifying users; use a descriptive name for the user segment and add controlling logic in the code.<br />- Flags must be removed once testing is complete.<br />- Changes to feature-flag values must be approved by the business owners beforehand. |
| **[A/B testing](background-information.html#a-b-testing)** | - Acceptable in the absence of better alternatives.<br />- For best results, conduct testing without the users' knowledge. | - Ensure features are fully working before exposing them to users.<br />- Do not use raw IDs in the feature-flag platform for the purpose of identifying users; use a descriptive name for the user segment and add controlling logic in the code.<br />- Flags must be removed once testing is complete.<br />- Changes to feature-flag values must be approved by the business owners beforehand. |
| **[User segmentation](background-information.html#user-segmentation)** | - **Do not use feature flags** for user segmentation.<br />- Represent differences between groups of users in the code itself through polymorphism, inheritance and so on.<br /> - Store preferences for individual users in configuration files or an application database.| |
| **[User permissions](background-information.html#user-permissions)** | - **Do not use feature flags** for user permissions.<br />- Use a common IdAM component created specifically for this purpose.| |
| **[Operational toggles](background-information.html#operational-toggles)** | - Feature flags are recommended for stabilising application behaviour during unusual or unfavourable conditions.<br />| - A formal procedure for deciding when such changes are necessary, who should do them and how they should be recorded must be in place and reviewed on a regular basis.<br />- Changes to feature-flag values must be approved by the business owners beforehand. |
| **[Monitoring and logging](background-information.html#monitoring-and-logging)** | - Feature flags are recommended for dynamically adjusting monitoring and logging levels as needed.<br />| - Care should be taken to ensure there is no adverse effect on application performance. |
| **[Live debugging](background-information.html#live-debugging)** | - Acceptable *only as a last resort* when the issue cannot be reproduced in a lower environment.<br />- Use with extreme caution.<br />- The developers carrying out the live debugging should be the most senior developers available. | - Changes to feature-flag values must be approved by the *service owner* beforehand. | 
| **[Short-cuts in testing](background-information.html#short-cuts-in-testing)** | - **Do not use feature flags** to take short-cuts in testing.<br />- Rather than simplifying an integration test, create smaller service- or contract-level tests lower down the [test pyramid](/standards/principles/test.html#types-of-testing) that verify the individual components  in isolation.<br /> - Use traditional methods of creating test data (e.g., entities in a test database).| |
| **[Feature deprecation](background-information.html#feature-deprecation)** | - Acceptable in the absence of better alternatives. | - Do not use raw IDs in the feature-flag platform for the purpose of identifying users; use a descriptive name for the user segment and add controlling logic in the code.<br />- Flags must be removed once the feature has been deprecated for all users.<br />- Changes to feature-flag values must be approved by the business owners beforehand. |


## Feature-flag management

In terms of management tools, [LaunchDarkly](https://launchdarkly.com/) is the feature-flag platform used by most HMCTS product teams that employ feature flags.  Another possibility is [Azure App Configuration](https://learn.microsoft.com/en-us/azure/azure-app-configuration/overview), which is rarely used in HMCTS but is obviously aligned with the strategic decision to use Azure as the platform for HMCTS cloud-based applications.  Finally, some teams use environment variables to provide feature-flag facilities in their code, which is clearly simpler and cheaper than using a commercial product but which may not be a satisfactory solution for many teams.

These three choices are summarised below.  Whichever one a team uses, care must be taken to avoid the feature-flag platform becoming a single point of failure for the application, as the availability of these external services can never be guaranteed.

| Platform | Guidelines |
|----------|-------------|
| **Azure App Configuration** | For **new applications based on Azure services**, in particular MS Entra ID (Azure AD), that are managed by **teams with prior experience of Azure administration**. |
| **Environment variables** | For applications requiring simpler feature-flag use, where the **product teams do *not* require auditing of changes or approvals** within a feature-flag platform. |
| **LaunchDarkly** | For **all other cases**. |


### Accessing Azure App Configuration

The process for gaining access to Azure App Configuration is under review; contact [Casey Attwell](mailto:casey.attwell@hmcts.net) for more information.  In the meantime, you can send a request to [#platops-help](https://hmcts-reform.slack.com/app_redirect?channel=platops-help) to get access for your application.


### Accessing LaunchDarkly

Developers automatically get access by being part of the `DTS CFT Developers` or `DTS SDS Developers` group in the [prod_users.yml](https://github.com/hmcts/azure-access/blob/master/users/prod_users.yml) file in the `azure-access` repository.  Non-developers can get access through the `DTS LaunchDarkly` group.

After you've logged in once you will be able to log in from [app.launchdarkly.com](https://app.launchdarkly.com/).

### Documentation

Documentation can be accessed directly from the [LaunchDarkly](https://docs.launchdarkly.com/home) website.  Their [blog](https://launchdarkly.com/blog/) also contains useful information.

### Creating a new project

See [hmcts/launchdarkly-terraform](https://github.com/hmcts/launchdarkly-terraform) for instructions on how to set your new project up.

### Environments

We currently provide 'Test' and 'Production' environments by default within LaunchDarkly.  [flag targeting](https://docs.launchdarkly.com/guides/tutorials/rules-and-targeting) is used to roll flags out to users across the different environments.

If your team requires additional environments, you can do this by updating the appropriate lines in your team's [terraform.tfvars](https://github.com/hmcts/launchdarkly-terraform/blob/896019ed1efdebdf9237b7811ab2b9585a7708f2/terraform.tfvars#L59-L61) file.  However,  this is not recommended as targeting rules should be simpler to manage and ensure consistency across environments.
