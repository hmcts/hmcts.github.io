---
title: Feature flags
last_reviewed_on: 2025-06-25
review_in: 6 months
weight: 97
---

# <%= current_page.data.title %>

Feature flags are a powerful tool that can enhance a team's productivity; but they should be used sparingly, as described below.  For further information and background regarding these guidelines, [click here](background-information.html).

## When to use feature flags

| Use case | Guidelines | Golden rules |
|----------|------------|--------------|
| **Dark deployments** |  - Prefer breaking features down into their smallest releasable components.<br />- Recommended for teams that _already_ practise trunk-based development. | - Do not use feature flags to hide features that do not work; test fully in lower environments first.<br />- Flags must be removed as soon as the feature is fully released to all users.<br />- Changes to feature-flag values must be approved by the business owners beforehand. |
| **Gradual roll-outs** | - Prefer breaking features down into their smallest releasable components.<br />- Recommended for protection against incomplete or uncertain *business processes* rather than features that may contain bugs. | - Do not use raw IDs in the feature-flag platform for the purpose of identifying users; use a descriptive name for the user segment and add controlling logic in the code.<br />- Flags must be removed as soon as the feature is fully released to all users.<br />- Changes to feature-flag values must be approved by the business owners beforehand. |
| **Feature experimentation / Beta testing** | - Acceptable in the absence of better alternatives.<br />Try to avoid selection bias by ensuring a representative cross-section of users are chosen. | - Ensure features are fully working (albeit incomplete) before exposing them to users.<br />- Do not use raw IDs in the feature-flag platform for the purpose of identifying users; use a descriptive name for the user segment and add controlling logic in the code.<br />- Flags must be removed once testing is complete.<br />- Changes to feature-flag values must be approved by the business owners beforehand. |
| **A/B testing** | - Acceptable in the absence of better alternatives.<br />- For best results, conduct testing without the users' knowledge. | - Ensure features are fully working before exposing them to users.<br />- Do not use raw IDs in the feature-flag platform for the purpose of identifying users; use a descriptive name for the user segment and add controlling logic in the code.<br />- Flags must be removed once testing is complete.<br />- Changes to feature-flag values must be approved by the business owners beforehand. |
| **User segmentation** | - Do not use feature flags for user segmentation.<br />- Represent differences between groups of users in the code itself through polymorphism, inheritance and so on.<br /> - Store preferences for individual users in configuration files or an application database.| |
| **User permissions** | - Do not use feature flags for user permissions.<br />- Use a common IdAM component created specifically for this purpose.| |
| **Operational toggles** | - Feature flags are recommended for stabilising application behaviour during unusual or unfavourable conditions.<br />| - A formal procedure for deciding when such changes are necessary, who should do them and how they should be recorded must be in place and reviewed on a regular basis.<br />- Changes to feature-flag values must be approved by the business owners beforehand. |
| **Monitoring and logging** | - Feature flags are recommended for dynamically adjusting monitoring and logging levels as needed.<br />| - Care should be taken to ensure there is no adverse effect on application performance. |
| **Live debugging** | - Acceptable *only as a last resort* when the issue cannot be reproduced in a lower environment.<br />- Use with extreme caution.<br />- The developers carrying out the live debugging should be the most senior developers available. | - Ensure that the feature flag is removed once the debugging is complete.<br />- Changes to feature-flag values must be approved by the *service owner* beforehand. | 
| **Short-cuts in testing** | - Do not use feature flags to take short-cuts in testing.<br />- Rather than simplifying an integration test, create smaller service- or contract-level tests lower down the [test pyramid](/standards/principles/test.html#types-of-testing) that verify the individual components  in isolation.<br /> - Use traditional methods of creating test data (e.g., entities in a test database).| |
| **Feature deprecation** | - Acceptable in the absence of better alternatives. | - Do not use raw IDs in the feature-flag platform for the purpose of identifying users; use a descriptive name for the user segment and add controlling logic in the code.<br />- Flags must be removed once the feature has been deprecated for all users.<br />- Changes to feature-flag values must be approved by the business owners beforehand. |


[GOT TO HERE]<br />
[GOT TO HERE]<br />
[GOT TO HERE]<br />
[GOT TO HERE]<br />
[GOT TO HERE]<br />
[GOT TO HERE]<br />
[GOT TO HERE]<br />


## Feature-flag platforms


| Platform | Guidelines |
|----------|-------------|
| **LaunchDarkly** | The incumbent choice.
| **Azure App Configuration** | The strategic choice.
| **Environment variables** | The simplest choice.


End to end Process:

1. Developer creates and commits short lived feature branch with Feature flag off.
2. Implements feature through iterations of small feature lifecycle.
3. Code is continuously released.
4. Retire feature toggle.


### Accessing LaunchDarkly

Developers automatically get access by being part of 'DTS CFT Developers' or 'DTS SDS Developers', non-developers can get access with the 'DTS LaunchDarkly' group.
see [onboarding](../onboarding/person/index.html) process to request access. You will need to login from [myapps.microsoft.com](https://myapps.microsoft.com/hmcts.net).

After you've logged in once you will be able to login from [app.launchdarkly.com](https://app.launchdarkly.com/).

### Documentation

Documentation can be accessed directly from the [LaunchDarkly](https://docs.launchdarkly.com/home) website.
Their [blog](https://launchdarkly.com/blog/) contains good information.

### Creating a new project

See [hmcts/launchdarkly-terraform](https://github.com/hmcts/launchdarkly-terraform) for instructions on how to setup your new project.

### Environments

We currently provide 'Test' and 'Production' environments by default within Launch Darkly. Flags are generally set to the same value in both 'Production' and the 'Test' environment, [flag targeting](https://docs.launchdarkly.com/guides/tutorials/rules-and-targeting) is used to control rollout of flags to users across environments.

If your team does require additional environments, you can do this by updating your teams [terraform.tfvars](https://github.com/hmcts/launchdarkly-terraform/blob/896019ed1efdebdf9237b7811ab2b9585a7708f2/terraform.tfvars#L59-L61). 
It is not recommended to do this as targeting rules should be simpler to manage and ensure consistency across environments.

