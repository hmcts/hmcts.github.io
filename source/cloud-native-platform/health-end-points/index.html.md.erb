---
title: Health end points
last_reviewed_on: 2023-12-7
review_in: 6 months
weight: 90
---

# <%= current_page.data.title %>

## Recommended health end points

### what to include in readiness checks

On Kubernetes, readiness probes will be called periodically throughout the lifetime of the container. Container will be made temporarily unavailable from serving traffic when the readiness check fails.

The requests won't even reach your application to handle errors. So, it is very important to consider what checks should be included into readiness probe.

While adding all dependant services to readiness check can help in identifying any misconfiguration during startup, it could cause unwanted downtime for the application.

K8s introduced startUp Probes (Alpha in 1.16 ) to handle startup cases separately.

Based on above, you should include a dependency into readiness checks only if they are exclusive/hard dependencies for your service. Unavailability of soft dependencies needs to be handled in code to give appropriate customer experience.

Good example for check to be included in readiness:

A private cache / database like Redis or Elastic Search which are exclusive to the application (not shared).

Bad example for check to be included in readiness:

Any shared components like IDAM, S2S or CCD.


### add db check to liveness probe

A new health check has been added to the liveness probe to check for database indicators,  an example on how to enable this on your application is [here](https://github.com/hmcts/spring-boot-template/blob/master/src/main/resources/application.yaml)
The “Liveness” state of an application tells whether its internal state allows it to work correctly, or recover by itself if it is currently failing. A broken “Liveness” state means that the application is in a state that it cannot recover from, and the infrastructure should restart the application.