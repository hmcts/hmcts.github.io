---
title: Create a Github Repository
last_reviewed_on: 2022-05-11
review_in: 6 months
weight: 3
---

# <%= current_page.data.title %>

Any developer added to [hmcts org](https://github.com/hmcts) is able to create a new Github repo.


1. Naming convention for repository is `{product}-{component}`. For product-level (shared) infastructure, the name should be `{product}-shared-infrastructure`. [More info](/ways-of-working/new-component/infrastructure-as-code.html#product-and-component-level-infrastructure)
2. If you are creating a NodeJS front end or Java backend component, you may want to use a template. These templates provide all the boiler plate code needed for a new app. 
    - [spring-boot-template](https://github.com/hmcts/spring-boot-template)
    - [expressjs-template](https://github.com/hmcts/expressjs-template)
    - Alternatively you can simply create a blank directory. If so, we recommend you draw inspiration from an existing working repository.
3. Repository should be public. [Gov UK guidance](https://www.gov.uk/service-manual/technology/making-source-code-open-and-reusable)
4. Do not add any collaborators outside organization. All access needs to be managed with GitHub teams and not users.
    
    _Note: You need to remove the user level admin access you got while creating the repository after you have added your team admins with the admin role._
    
5. Find or create your Github Team in [Team Onboarding](/onboarding/team/#github-config). Give your team members the following access to the Repo.
    <table>
     <tr>
       <th>Github team</th>
       <th>Role</th>
     </tr>
     <tr>
       <td>`<team-name>`</td>
       <td>write</td>
     </tr>
     <tr>
       <td>`<team-name>-admins`</td>
       <td>admin</td>
     </tr>
    </table>
    
6. Add a branch protection rule for `master` branch with recommended settings. This is in https://github.com/[REPO]/settings/branches, then clicking "Add rule" beside Branch protection rules.
   - Enable `Require a pull request before merging` and `Require approvals`
   - Choose which status checks needs to be mandatory for merging PRs (this can be done only after checks like Jenkins are setup)
   - We recommend enabling `Include administrators`.

### Suggested Branch Protection Rules

These are the recommended settings to configure for your main branch on your repository, however each project might run differently so these are not These are the recommended settings to configure for your main branch on your repository, however each project might run differently so these are not compulsory.
Check and fill out the below options on the Branch Protection Rules of your main branch.

- Require a pull request before merging
    - Require Approvals (minimal 1)
- Require status checks to pass before merging
    - Select `continuous-integration/jenkins/pr-merge` if using Jenkins or select relevant CI builds
- Do not allow bypassing the above settings 