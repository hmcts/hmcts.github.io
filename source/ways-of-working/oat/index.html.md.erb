---
title: OAT
last_reviewed_on: 2022-09-27
review_in: 6 months
weight: 3
---

# <%= current_page.data.title %>

This covers details on the Operational Acceptance Testing performed by Platform Operations for a change to go into production.

## Objectives

- Check that the service/update has been tested thoroughly so that when it goes live, it has got the best chance of success.
- Facilitate the maintenance of the product by having comprehensive documentation of how it is built, used, and supported.
- Dev teams/ Platform Operations to be confident that in an event of production incident on the service, they have everything needed to assess and mitigate the issue.

## Do i need a OAT for my change ?

- Though Platform Operations do not OAT every change, it is development team's responsibility to make sure even a small code change complies with OAT objectives and criteria.
- Major releases that goes through Release Management should add details on Impact Analysis why the release should/ shouldn't need specific OAT from platops.
- Some examples when platops would mandate a OAT:
     1. New component [Component](/glossary/#component) being added. It could be a simple Job/ Function.
     2. Changes which has performance or security impact. This is usually assessed early in release cycle to check the need for Perftest, ITHC.
     3. New integration being added to existing [Component](/glossary/#component).
     4. Infrastructure changes or additions to a [Product](/glossary/#product)/[Component](/glossary/#component)


## How do i ask for a OAT ?

- Requests comes through Release Management.
- Release Management have a set of OAT tasks on the release JIRA.
- Development team need to assess and comment on each of the OAT tickets on how the changes made are compliant with the criteria on OAT tasks. Refer [OAT Tasks and recommendations](#oat-tasks-and-recommendations) for more guidance .
- Once all tickets and [Service Operations Guide](#service-operations-guide) have been updated, Release management will create a JIRA ticket for Platform Operations to validate the OAT tasks.


## OAT Tasks and recommendations

This section covers the tasks in OAT and some generic recommendations to ensure the service is compliant with OAT criteria.

`Please note these are generic recommendations and may vary from service to service based on application design`


### Service Operations Guide

- Service Operations Guide (SOG) is a living document for each service that should be updated whenever there are relevant changes irrespective of the size of the change.
- SOG should document all the required information on all OAT tasks detailed in later sections.
- Below are some example SOGs on Confluence:
   * [IA Tech Team: Service Operations Guide](https://tools.hmcts.net/confluence/pages/viewpage.action?pageId=1274250278)
   * [PCQ Service Operations Guide](https://tools.hmcts.net/confluence/display/PCQ/PCQ+Service+Operations+Guide)


### Digital Operations Capability

- This OAT is to confirm that there are sufficient resources available to ensure that the service is maintainable and to facilitate knowledge transfer.
- SOG should be updated with :
  * Links to application, Infrastructure code in Github and related build pipelines.
  * Links to High/Low Level Design Documents or a high level purpose of each application.
  * Details of Azure Infrastructure being used like keyvaults, Databases.
  * Dependency of any external services.

### Service Level Agreements

- This OAT is to capture any specific NFRs unique to the service/product that needs to be captured and evidenced.
- Service team should identify and document SLAs of the applicable components in the OAT task.
- Any external SLAs other than Azure should be explicitly listed in SOG.
- Below are SLA details for some standard Azure services.

| Azure service | SLA |
| - | - |
| Azure Kubernetes Service | [Kubernetes](https://azure.microsoft.com/en-us/support/legal/sla/kubernetes-service/v1_1/) |
| Azure Container Registry | [Container-registry](https://azure.microsoft.com/en-us/support/legal/sla/container-registry/v1_1/) |
| Azure Application Gateway | [Application-gateway](https://azure.microsoft.com/en-us/support/legal/sla/application-gateway/v1_2/) |
| Azure Front Door | [Frontdoor](https://azure.microsoft.com/en-us/support/legal/sla/frontdoor/v1_0/) |
| Azure Firewall | [Azure-firewall](https://azure.microsoft.com/en-us/support/legal/sla/azure-firewall/v1_1/) |
| Azure DNS | [DNS](https://azure.microsoft.com/en-us/support/legal/sla/dns/v1_1/) |
| Azure Content Delivery Network | [CDN](https://azure.microsoft.com/en-us/support/legal/sla/cdn/v1_0/) |
| Azure Storage Account | [Storage Account](https://azure.microsoft.com/en-us/support/legal/sla/storage/v1_5/) |
| Azure Active Directory | [Azure AD](https://azure.microsoft.com/en-us/support/legal/sla/active-directory/v1_0/) |
| Azure DevOps | [Azure Devops](https://azure.microsoft.com/en-us/support/legal/sla/azure-devops/v2_0/) |
| Azure PostgresSQL Database | [Postgresql](https://azure.microsoft.com/en-us/support/legal/sla/postgresql/v1_1/) |
| Azure Service Bus | [Service Bus](https://azure.microsoft.com/en-us/support/legal/sla/service-bus/v1_1/)|

### Licensing

- This OAT is to ensure the software and licenses for infrastructure and hosting is appropriately licensed and supported for the proposed design of the environments required for the service.
- Development team to assess and document in SOG if there are any tools/ dependencies which are not covered under standard open source licensing.
- Tools like Camunda, Launch Darkly can be marked as "Platform Managed"

### Support Capability - Incident Handling

- This OAT is to ensure there is a robust support model for the product as part of the delivery.
- SOG should be updated with with support model along with details about `Assignment Group` in Service Now.
- Standard support model is documented in [confluence](https://tools.hmcts.net/confluence/display/DIP/Public+Beta+Support)

### Error Handling Framework

- This OAT is to ensure facilities are in place for errors/exceptions to recorded to be referred against in case of production issues.
- SOG to be updated with list of all exceptions being raised by the service with possible cause and resolution marked against.
- SOG should also confirm adherence to [status code and error standards](https://hmcts.github.io/restful-api-standards/#http-status-codes-and-errors)

### Data Retention

- This OAT is to ensure that this release complies with data retention policies set by HMCTS and GDPR.
- SOG should outline data retention policy on all the data being stored by the services.
- This is applicable to all the direct data stores that services use like Redis, Postgresql and any data that is stored in dependent systems like CCD.
- Application should also make sure that data should not be reintroduced on restoring from backup.

### Service Continuity

- This OAT is to confirm that the service has a robust approach for dealing with the event of a catastrophic failure.
- Application team to make sure they have `/health/liveness` URLs configured so that Kubernetes can automatically restart the service for restoration.
- Make sure any cron jobs that are not running on services that are serving end user traffic.
- Elaborate in SOG on how Jobs would handle failures.
- SOG should add reasoning if using higher CPU/Memory requests than defaults.

### Shuttering

- This OAT is applicable for front end services to make sure they have shuttering mechanism in place.
- [Shuttering](https://hmcts.github.io/ways-of-working/path-to-live/shutter.html) should be configured and tested before documenting in SOG.

### Resilience

- This OAT is to ensure that the system can recover or fail over to a secondary component in the event of failure.
- All services should be configured with appropriate `readiness` and `liveness` checks.
- Applications deployed through flux, automatically get deployed to multiple clusters with multiple isntances running.
- Development teams to confirm that all services (including jobs) are configured to run in both clusters.
- Performance test results should be attached to the task.
- Development team to make sure any performance tuning changes are applied to prod.



