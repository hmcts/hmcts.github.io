---
title: Common pipeline
last_reviewed_on: 2021-10-04
review_in: 6 months
weight: 3
---

# <%= current_page.data.title %>

> To get onboarded to the common pipeline please see [Jenkins onboarding](/onboarding/team/jenkins.html).

The common pipeline is a Jenkins pipeline defined by [code](https://github.com/hmcts/cnp-jenkins-library)
which implements Continuous Delivery to production while enforcing a standard set of 
checks on the code processed. 

It enables HMCTS Reform to deploy changes to the platform in a well defined 
manner providing the confidence that all the test and verification 
stages have been executed in a structured and repeatable sequence. 
This allows for fast feedback to developers to improve code development velocity. 

The delivery pipeline combines infrastructure and database schema changes with the 
application deployment, therefore taking advantage of the microservices architecture 
in use at HMCTS.

Code changes are subjected to a round of static tests - consisting of unit tests, static 
code analysis and security checks - before being deployed to a non-prod environment in a 
non-publicly accessible AKS (Kubernetes) deployment. Here, a range of smoke tests and 
non-destructive functional tests verifies the app is functioning. At this point a promotion 
process is started which labels the Docker image produced by the previous stages of the 
pipeline as production-ready. Production deployments are managed by flux which takes care 
of keeping an application deployment up to date with the latest production-ready image generated 
by the delivery pipeline.

Smoke tests are available in production as part of a flux deployment and run from a separate container.  

The entire Delivery Pipeline is a hands-off, automated process, triggered at the point of change. Code merged 
to master is deployed to production without any further human intervention. For this reason:

- PRs need to be carefully reviewed
- Feature Flagging, to separate the deployment of changes from their activation, is a practical necessity for all apps.

[Helm](https://helm.sh) is the package manager for Kubernetes. 
We deploy all of our applications using a helm chart to Kubernetes.
For more information about Helm, please see the related new component 
[docs](../new-component/helm-chart.html)

![The Common Pipeline](/images/common-pipeline.png)

The diagram below shows the end to end workflow of how an application is deployed throughout the SDLC, Perftest is an example of a non path to live environment that is _optionally_ deployed to.

An application consists of the different infrastructure levels of platform, product and component as detailed in [Infrastructure levels](/ways-of-working/new-component/infrastructure-as-code.html#infrastructure-levels).

The product and component levels are combined to define the name of the application, denoted by app-name in the diagram below. The values for product and component should be defined in the Jenkinsfile within the github repo.

Example: [cnp-plum-frontend](https://github.com/hmcts/cnp-plum-frontend/blob/master/Jenkinsfile_CNP)

The environments shown in the diagram reflect CFT. Review the table below the diagram to see the corresponding SDS environment names.

![AKS Release](/images/aks-release.png)

|CFT Environment|SDS Environment|
|-|-|
|AAT|Staging|
|Perftest|Test|
|Preview|Dev|
|Prod|Prod|


### Troubleshooting build issues

See [troubleshooting issues](../troubleshooting/). 
